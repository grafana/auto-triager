name: "Check Issue Label"

description: 'Checks if an issue has the "internal" label and sets outputs or prints messages accordingly.'

inputs:
  token:
    description: "GitHub token to access the issue information"
    required: true
  issue_number:
    description: "The number of the issue to check"
    required: true
  openai_api_key:
    description: "OpenAI API key to use for the triager"
    required: true
  add_labels:
    description: "Add the labels to the issue"
    required: false
    default: "false"

outputs:
  triage_labels:
    description: "The labels of the issue"
    value: ${{ steps.triager.outputs.triage_labels }}

runs:
  using: "composite"
  steps:
    - name: Set variables
      run: |
        echo "INTERNAL_LABEL=internal" >> $GITHUB_ENV
      shell: bash

    # To prevent triaging issues that are tagged as internal or have been closed quickly
    - name: Fetch issue labels and state
      id: fetch-facts
      run: |
        repo="${{ github.repository }}"
        issue_info=$(curl -s -H "Authorization: token ${{ inputs.token }}" \
                "https://api.github.com/repos/$repo/issues/${{ inputs.issue_number }}")
        labels=$(echo "$issue_info" | jq -r '.labels[] | select(.name == "${{ env.INTERNAL_LABEL }}") | .name')
        state=$(echo "$issue_info" | jq -r '.state')

        echo "Issue number: ${{ inputs.issue_number }}"
        echo "Fetched labels: $labels"
        echo "Fetched state: $state"

        echo "labels=$labels" >> $GITHUB_OUTPUT
        echo "state=$state" >> $GITHUB_OUTPUT
      shell: bash

    - name: check if state is not open
      id: check-state
      run: |
        if [ "${{ steps.fetch-facts.outputs.state }}" = "open" ]; then
          echo "should_triage=true" >> $GITHUB_OUTPUT
        else
          echo "The issue is not open or has the internal label. Finishing the job."
          echo "should_triage=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - uses: actions/setup-go@v5
      if: steps.check-state.outputs.should_triage == 'true'
      with:
        go-version-file: "${{ github.action_path }}/go.mod"
        cache-dependency-path: "${{ github.action_path }}/go.sum"

    - name: Run Auto Triager and add labels
      if: steps.check-state.outputs.should_triage == 'true'
      id: triager
      run: |
        cd ${{ github.action_path }}
        # go mod download
        echo "Running auto triager"
        go run ${{ github.action_path }}/pkg/cmd/triager-openai/triager-openai.go -issueId ${{ inputs.issue_number }} -repo ${{ github.repository }} -addLabels=${{ inputs.add_labels }} | tee triager_output.txt
        echo "triager_output=$(cat triager_output.txt)" >> $GITHUB_OUTPUT
        labels=$(cat triager_output.txt | jq -r '.categoryLabel + .typeLabel  | map("\\\"\(.)\\\"")| join(",")')
        echo ""
        echo "Final labels: $labels"
        echo "triage_labels=$labels" >> $GITHUB_OUTPUT
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
